<?php
/**
 * StartLiveActivityRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace onesignal\client\model;

use \ArrayAccess;
use \onesignal\client\ObjectSerializer;

/**
 * StartLiveActivityRequest Class Doc Comment
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StartLiveActivityRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StartLiveActivityRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'event' => 'string',
        'activity_id' => 'string',
        'event_attributes' => 'object',
        'event_updates' => 'object',
        'contents' => '\onesignal\client\model\LanguageStringMap',
        'headings' => '\onesignal\client\model\LanguageStringMap',
        'stale_date' => 'int',
        'priority' => 'int',
        'ios_relevance_score' => 'float',
        'idempotency_key' => 'string',
        'include_aliases' => 'array<string,string[]>',
        'include_subscription_ids' => 'string[]',
        'included_segments' => 'string[]',
        'excluded_segments' => 'string[]',
        'filters' => '\onesignal\client\model\FilterExpression[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'event' => null,
        'activity_id' => null,
        'event_attributes' => null,
        'event_updates' => null,
        'contents' => null,
        'headings' => null,
        'stale_date' => null,
        'priority' => null,
        'ios_relevance_score' => null,
        'idempotency_key' => null,
        'include_aliases' => null,
        'include_subscription_ids' => null,
        'included_segments' => null,
        'excluded_segments' => null,
        'filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'event' => 'event',
        'activity_id' => 'activity_id',
        'event_attributes' => 'event_attributes',
        'event_updates' => 'event_updates',
        'contents' => 'contents',
        'headings' => 'headings',
        'stale_date' => 'stale_date',
        'priority' => 'priority',
        'ios_relevance_score' => 'ios_relevance_score',
        'idempotency_key' => 'idempotency_key',
        'include_aliases' => 'include_aliases',
        'include_subscription_ids' => 'include_subscription_ids',
        'included_segments' => 'included_segments',
        'excluded_segments' => 'excluded_segments',
        'filters' => 'filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'event' => 'setEvent',
        'activity_id' => 'setActivityId',
        'event_attributes' => 'setEventAttributes',
        'event_updates' => 'setEventUpdates',
        'contents' => 'setContents',
        'headings' => 'setHeadings',
        'stale_date' => 'setStaleDate',
        'priority' => 'setPriority',
        'ios_relevance_score' => 'setIosRelevanceScore',
        'idempotency_key' => 'setIdempotencyKey',
        'include_aliases' => 'setIncludeAliases',
        'include_subscription_ids' => 'setIncludeSubscriptionIds',
        'included_segments' => 'setIncludedSegments',
        'excluded_segments' => 'setExcludedSegments',
        'filters' => 'setFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'event' => 'getEvent',
        'activity_id' => 'getActivityId',
        'event_attributes' => 'getEventAttributes',
        'event_updates' => 'getEventUpdates',
        'contents' => 'getContents',
        'headings' => 'getHeadings',
        'stale_date' => 'getStaleDate',
        'priority' => 'getPriority',
        'ios_relevance_score' => 'getIosRelevanceScore',
        'idempotency_key' => 'getIdempotencyKey',
        'include_aliases' => 'getIncludeAliases',
        'include_subscription_ids' => 'getIncludeSubscriptionIds',
        'included_segments' => 'getIncludedSegments',
        'excluded_segments' => 'getExcludedSegments',
        'filters' => 'getFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENT_START = 'start';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_START,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['event'] = $data['event'] ?? 'start';
        $this->container['activity_id'] = $data['activity_id'] ?? null;
        $this->container['event_attributes'] = $data['event_attributes'] ?? null;
        $this->container['event_updates'] = $data['event_updates'] ?? null;
        $this->container['contents'] = $data['contents'] ?? null;
        $this->container['headings'] = $data['headings'] ?? null;
        $this->container['stale_date'] = $data['stale_date'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['ios_relevance_score'] = $data['ios_relevance_score'] ?? null;
        $this->container['idempotency_key'] = $data['idempotency_key'] ?? null;
        $this->container['include_aliases'] = $data['include_aliases'] ?? null;
        $this->container['include_subscription_ids'] = $data['include_subscription_ids'] ?? null;
        $this->container['included_segments'] = $data['included_segments'] ?? null;
        $this->container['excluded_segments'] = $data['excluded_segments'] ?? null;
        $this->container['filters'] = $data['filters'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['activity_id'] === null) {
            $invalidProperties[] = "'activity_id' can't be null";
        }
        if ($this->container['event_attributes'] === null) {
            $invalidProperties[] = "'event_attributes' can't be null";
        }
        if ($this->container['event_updates'] === null) {
            $invalidProperties[] = "'event_updates' can't be null";
        }
        if ($this->container['contents'] === null) {
            $invalidProperties[] = "'contents' can't be null";
        }
        if ($this->container['headings'] === null) {
            $invalidProperties[] = "'headings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name An internal name to assist with your campaign organization. This does not get displayed in the message itself.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        $allowedValues = $this->getEventAllowableValues();
        if (!in_array($event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id Set a unique activity_id to track and manage the Live Activity.
     *
     * @return self
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets event_attributes
     *
     * @return object
     */
    public function getEventAttributes()
    {
        return $this->container['event_attributes'];
    }

    /**
     * Sets event_attributes
     *
     * @param object $event_attributes Default/static data to initialize the Live Activity upon start.
     *
     * @return self
     */
    public function setEventAttributes($event_attributes)
    {
        $this->container['event_attributes'] = $event_attributes;

        return $this;
    }

    /**
     * Gets event_updates
     *
     * @return object
     */
    public function getEventUpdates()
    {
        return $this->container['event_updates'];
    }

    /**
     * Sets event_updates
     *
     * @param object $event_updates Dynamic content used to update the running Live Activity at start. Must match the ContentState interface defined in your app.
     *
     * @return self
     */
    public function setEventUpdates($event_updates)
    {
        $this->container['event_updates'] = $event_updates;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \onesignal\client\model\LanguageStringMap
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \onesignal\client\model\LanguageStringMap $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets headings
     *
     * @return \onesignal\client\model\LanguageStringMap
     */
    public function getHeadings()
    {
        return $this->container['headings'];
    }

    /**
     * Sets headings
     *
     * @param \onesignal\client\model\LanguageStringMap $headings headings
     *
     * @return self
     */
    public function setHeadings($headings)
    {
        $this->container['headings'] = $headings;

        return $this;
    }

    /**
     * Gets stale_date
     *
     * @return int|null
     */
    public function getStaleDate()
    {
        return $this->container['stale_date'];
    }

    /**
     * Sets stale_date
     *
     * @param int|null $stale_date Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
     *
     * @return self
     */
    public function setStaleDate($stale_date)
    {
        $this->container['stale_date'] = $stale_date;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Delivery priority through the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user's device. If not set, defaults to 10.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets ios_relevance_score
     *
     * @return float|null
     */
    public function getIosRelevanceScore()
    {
        return $this->container['ios_relevance_score'];
    }

    /**
     * Sets ios_relevance_score
     *
     * @param float|null $ios_relevance_score iOS 15+. A score to indicate how a notification should be displayed when grouped. Use a float between 0-1.
     *
     * @return self
     */
    public function setIosRelevanceScore($ios_relevance_score)
    {
        $this->container['ios_relevance_score'] = $ios_relevance_score;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string|null
     */
    public function getIdempotencyKey()
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string|null $idempotency_key Correlation and idempotency key. A request received with this parameter will first look for another notification with the same idempotency key. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same idempotency key will be sent again.   See Idempotent Notification Requests for more details writeOnly: true
     *
     * @return self
     */
    public function setIdempotencyKey($idempotency_key)
    {
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets include_aliases
     *
     * @return array<string,string[]>|null
     */
    public function getIncludeAliases()
    {
        return $this->container['include_aliases'];
    }

    /**
     * Sets include_aliases
     *
     * @param array<string,string[]>|null $include_aliases Target specific users by aliases assigned via API. An alias can be an external_id, onesignal_id, or a custom alias. Accepts an object where keys are alias labels and values are arrays of alias IDs to include Example usage: { \"external_id\": [\"exId1\", \"extId2\"], \"internal_label\": [\"id1\", \"id2\"] } Not compatible with any other targeting parameters. REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call Note: If targeting push, email, or sms subscribers with same ids, use with target_channel to indicate you are sending a push or email or sms.
     *
     * @return self
     */
    public function setIncludeAliases($include_aliases)
    {
        $this->container['include_aliases'] = $include_aliases;

        return $this;
    }

    /**
     * Gets include_subscription_ids
     *
     * @return string[]|null
     */
    public function getIncludeSubscriptionIds()
    {
        return $this->container['include_subscription_ids'];
    }

    /**
     * Sets include_subscription_ids
     *
     * @param string[]|null $include_subscription_ids Specific subscription ids to target. Not compatible with other targeting parameters.
     *
     * @return self
     */
    public function setIncludeSubscriptionIds($include_subscription_ids)
    {
        $this->container['include_subscription_ids'] = $include_subscription_ids;

        return $this;
    }

    /**
     * Gets included_segments
     *
     * @return string[]|null
     */
    public function getIncludedSegments()
    {
        return $this->container['included_segments'];
    }

    /**
     * Sets included_segments
     *
     * @param string[]|null $included_segments Segment names to include. Only compatible with excluded_segments.
     *
     * @return self
     */
    public function setIncludedSegments($included_segments)
    {
        $this->container['included_segments'] = $included_segments;

        return $this;
    }

    /**
     * Gets excluded_segments
     *
     * @return string[]|null
     */
    public function getExcludedSegments()
    {
        return $this->container['excluded_segments'];
    }

    /**
     * Sets excluded_segments
     *
     * @param string[]|null $excluded_segments Segment names to exclude. Only compatible with included_segments.
     *
     * @return self
     */
    public function setExcludedSegments($excluded_segments)
    {
        $this->container['excluded_segments'] = $excluded_segments;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \onesignal\client\model\FilterExpression[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \onesignal\client\model\FilterExpression[]|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


