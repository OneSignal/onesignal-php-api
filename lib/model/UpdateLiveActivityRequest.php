<?php
/**
 * UpdateLiveActivityRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.0
 * Contact: devrel@onesignal.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace onesignal\client\model;

use \ArrayAccess;
use \onesignal\client\ObjectSerializer;

/**
 * UpdateLiveActivityRequest Class Doc Comment
 *
 * @category Class
 * @package  onesignal\client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdateLiveActivityRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateLiveActivityRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'event' => 'string',
        'event_updates' => 'object',
        'contents' => '\onesignal\client\model\LanguageStringMap',
        'headings' => '\onesignal\client\model\LanguageStringMap',
        'sound' => 'string',
        'stale_date' => 'int',
        'dismissal_date' => 'int',
        'priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'event' => null,
        'event_updates' => null,
        'contents' => null,
        'headings' => null,
        'sound' => null,
        'stale_date' => null,
        'dismissal_date' => null,
        'priority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'event' => 'event',
        'event_updates' => 'event_updates',
        'contents' => 'contents',
        'headings' => 'headings',
        'sound' => 'sound',
        'stale_date' => 'stale_date',
        'dismissal_date' => 'dismissal_date',
        'priority' => 'priority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'event' => 'setEvent',
        'event_updates' => 'setEventUpdates',
        'contents' => 'setContents',
        'headings' => 'setHeadings',
        'sound' => 'setSound',
        'stale_date' => 'setStaleDate',
        'dismissal_date' => 'setDismissalDate',
        'priority' => 'setPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'event' => 'getEvent',
        'event_updates' => 'getEventUpdates',
        'contents' => 'getContents',
        'headings' => 'getHeadings',
        'sound' => 'getSound',
        'stale_date' => 'getStaleDate',
        'dismissal_date' => 'getDismissalDate',
        'priority' => 'getPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENT_UPDATE = 'update';
    public const EVENT_END = 'end';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_UPDATE,
            self::EVENT_END,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['event'] = $data['event'] ?? null;
        $this->container['event_updates'] = $data['event_updates'] ?? null;
        $this->container['contents'] = $data['contents'] ?? null;
        $this->container['headings'] = $data['headings'] ?? null;
        $this->container['sound'] = $data['sound'] ?? null;
        $this->container['stale_date'] = $data['stale_date'] ?? null;
        $this->container['dismissal_date'] = $data['dismissal_date'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['event_updates'] === null) {
            $invalidProperties[] = "'event_updates' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name An internal name to assist with your campaign organization. This does not get displayed in the message itself.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        $allowedValues = $this->getEventAllowableValues();
        if (!in_array($event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets event_updates
     *
     * @return object
     */
    public function getEventUpdates()
    {
        return $this->container['event_updates'];
    }

    /**
     * Sets event_updates
     *
     * @param object $event_updates This must match the ContentState interface you have defined within your Live Activity in your app.
     *
     * @return self
     */
    public function setEventUpdates($event_updates)
    {
        $this->container['event_updates'] = $event_updates;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \onesignal\client\model\LanguageStringMap|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \onesignal\client\model\LanguageStringMap|null $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets headings
     *
     * @return \onesignal\client\model\LanguageStringMap|null
     */
    public function getHeadings()
    {
        return $this->container['headings'];
    }

    /**
     * Sets headings
     *
     * @param \onesignal\client\model\LanguageStringMap|null $headings headings
     *
     * @return self
     */
    public function setHeadings($headings)
    {
        $this->container['headings'] = $headings;

        return $this;
    }

    /**
     * Gets sound
     *
     * @return string|null
     */
    public function getSound()
    {
        return $this->container['sound'];
    }

    /**
     * Sets sound
     *
     * @param string|null $sound Sound file that is included in your app to play instead of the default device notification sound. Omit to disable vibration and sound for the notification.
     *
     * @return self
     */
    public function setSound($sound)
    {
        $this->container['sound'] = $sound;

        return $this;
    }

    /**
     * Gets stale_date
     *
     * @return int|null
     */
    public function getStaleDate()
    {
        return $this->container['stale_date'];
    }

    /**
     * Sets stale_date
     *
     * @param int|null $stale_date Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
     *
     * @return self
     */
    public function setStaleDate($stale_date)
    {
        $this->container['stale_date'] = $stale_date;

        return $this;
    }

    /**
     * Gets dismissal_date
     *
     * @return int|null
     */
    public function getDismissalDate()
    {
        return $this->container['dismissal_date'];
    }

    /**
     * Sets dismissal_date
     *
     * @param int|null $dismissal_date Accepts Unix timestamp in seconds; only allowed if event is \"end\"
     *
     * @return self
     */
    public function setDismissalDate($dismissal_date)
    {
        $this->container['dismissal_date'] = $dismissal_date;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Delivery priority through the the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user's device. If not set, defaults to 10. Some providers (APNs) allow for a limited budget of high priority notifications per hour, and if that budget is exceeded, the provider may throttle notification delivery.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


